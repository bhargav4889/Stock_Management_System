@using System.Data;
@model Stock_Management_System.Areas.Stocks.Models.Customers_Stock_Combined_Model;
@{
    ViewData["Title"] = "Update Stock";
}


<div class="content">
    <div class="page-header">
        <div class="page-title">
            <h4>Update Stock</h4>
            <h6 style="font-style:initial; font-weight:bolder;color:gray">Update Existing Stock</h6>
        </div>
    </div>

    <div class="card">
        <div class="card-body">

            <form class="row g-3" asp-action="Update_Stock_Details" asp-controller="Stock" onsubmit="return CheckData()" method="post">


                <input type="hidden" value="@Model.Insert_Purchase_Stock.PurchaseStockId"  asp-for="@Model.Insert_Purchase_Stock.PurchaseStockId" />

                <!-- Date -->
                <div class="col-lg-3 col-sm-6 col-12">
                    <div class="form-group">
                        <label><span style="color: black;">*</span> Stock Date </label>
                        <input type="date" placeholder="DD-MM-YYYY" id="datepicker" asp-for="@Model.Insert_Purchase_Stock.PurchaseStockDate" class="form-control">
                    </div>
                </div>

                <!-- Stock Type -->

                <div class="col-lg-3 col-sm-6 col-12">
                    <div class="form-group">
                        <label><span style="color: black;">*</span> Select Grade</label>
                        <select class="select" id="stockgrade" aria-label="stockgrade" asp-for="@Model.Insert_Purchase_Stock.ProductGradeId" asp-items="ViewBag.ProductGrade">
                            <option selected disabled>-- Stock Grade --</option>
                        </select>


                    </div>
                </div>


                <!-- Grain Type -->
                <div class="col-lg-3 col-sm-6 col-12">
                    <div class="form-group">
                        <label><span style="color: red;">*</span> Select Product Type</label>
                        <select class="select" id="selectgrain" aria-label="graintype" asp-for="@Model.Insert_Purchase_Stock.ProductId" asp-items="ViewBag.Products">
                            <option value="" selected disabled>-- Select Grain --</option>
                        </select>

                    </div>
                </div>
                @*   <input type="hidden" asp-for="Purchase_Stock.ProductName" />*@





                <!-- Customer Name -->
                <div class="col-lg-3 col-sm-6 col-12">
                    <div class="form-group">
                        <label><span style="color: red;">*</span> Customer Name</label>
                        <input type="text" class="form-control" id="farmer" placeholder="Customer Name" asp-for="@Model.Customers.CustomerName" oninput="this.value = this.value.toUpperCase()">

                        <span class="text-danger" style="color: red; font-size:11px; font-weight:bold;" asp-validation-for="@Model.Customers.CustomerName"></span>
                        <span id="newCustomerMessage" style="color:green">* New Customer</span>
                    </div>
                </div>

                @if(Model.Customers.CustomerName == Model.Customers.CustomerName)
                {
                    <input type="hidden" id="CustomerId" asp-for="@Model.Customers.CustomerId" />
                }
                else
                {
                    Model.Customers.CustomerId = 0;
                    <input type="hidden" id="CustomerId" value="0" />
                }



                <!-- Customer Type -->
                <div id="newcustomertype" class="col-lg-3 col-sm-6 col-12" style="display: none;">
                    <div class="form-group">
                        <label><span style="color: red;">*</span> New Customer Type</label>
                        <input type="text" class="form-control" placeholder="Customer Type" id="cttype" asp-for="@Model.Customers.CustomerType" oninput="this.value = this.value.toUpperCase()">

                        <span class="text-danger" style="color: red; font-size:11px; font-weight:bold;" asp-validation-for="@Model.Customers.CustomerType"></span>
                    </div>
                </div>

                <!-- Customer City -->
                <div id="newcustomercity" class="col-lg-3 col-sm-6 col-12" style="display: none;">
                    <div class="form-group">
                        <label for="ctname"><span style="color: red;">*</span> New Customer City</label>
                        <input type="text" class="form-control" placeholder="City Name" id="customercity" asp-for="@Model.Customers.CustomerAddress" oninput="this.value = this.value.toUpperCase()">

                        <span class="text-danger" style="color: red; font-size:11px; font-weight:bold;" asp-validation-for="@Model.Customers.CustomerAddress"></span>
                    </div>
                </div>

                <!-- Customer Contact_No -->
                <div id="newcustomerphoneno" class="col-lg-3 col-sm-6 col-12" style="display: none;">
                    <div class="form-group">
                        <label for="bags"><span style="color: red;">*</span> Enter Customer No</label>
                        <input type="number" inputmode="numeric" class="form-control" placeholder="Contact No" asp-for="@Model.Customers.CustomerContact" id="contactno">

                        <span class="text-danger" style="color: red; font-size:11px; font-weight:bold;" asp-validation-for="@Model.Customers.CustomerContact"></span>
                    </div>
                </div>


                <!-- Customer Good Taken Loaction -->
                <div class="col-lg-3 col-sm-6 col-12">
                    <div class="form-group">
                        <label><span style="color: red;">*</span> Stock Taken Place</label>
                        <input type="text" class="form-control" placeholder="Enter Location" asp-for="@Model.Insert_Purchase_Stock.PurchaseStockLocation" id="goodtakenloc" oninput="this.value = this.value.toUpperCase()">

                        <span class="text-danger" style="color: red; font-size:11px; font-weight:bold;" asp-validation-for="@Model.Insert_Purchase_Stock.PurchaseStockLocation"></span>
                    </div>
                </div>

                <!-- Tolat Name -->
                <div class="col-lg-3 col-sm-6 col-12">
                    <div class="form-group">
                        <label><span style="color: red;">*</span> Tolat Name</label>
                        <input type="text" class="form-control" placeholder="Tolat Name" asp-for="@Model.Insert_Purchase_Stock.TolatName" id="tolatname" oninput="this.value = this.value.toUpperCase()">

                        <span class="text-danger" style="color: red; font-size:11px; font-weight:bold;" asp-validation-for="@Model.Insert_Purchase_Stock.TolatName"></span>
                    </div>
                </div>

                <!-- Bags -->
                <div class="col-lg-3 col-sm-6 col-12">
                    <div class="form-group">
                        <label><span style="color: black;">*</span> Bags</label>
                        <input type="number" inputmode="numeric" class="form-control" placeholder="Bags" id="bags" oninput="CalculateMethod()" asp-for="@Model.Insert_Purchase_Stock.Bags">

                    </div>
                </div>

                <!-- Bags Per KG -->
                <div class="col-lg-3 col-sm-6 col-12">
                    <div class="form-group">
                        <label for="bagsperkg"><span style="color: black;">*</span> Bags Per KG</label>
                        <input type="number" inputmode="numeric" class="form-control" placeholder="Bags per KG" id="bagsperkg" oninput="CalculateMethod()" asp-for="@Model.Insert_Purchase_Stock.BagPerKg">

                    </div>
                </div>

                <!-- Weight -->
                <div class="col-lg-3 col-sm-6 col-12">
                    <div class="form-group">
                        <label for="weight"><span style="color: red;">*</span> Weight</label>
                        <input type="number" inputmode="numeric" class="form-control" placeholder="Weight" id="weight" asp-for="@Model.Insert_Purchase_Stock.TotalWeight">

                        <span class="text-danger" style="color: red; font-size:11px; font-weight:bold;" asp-validation-for="@Model.Insert_Purchase_Stock.TotalWeight"></span>
                    </div>
                </div>

                <!-- Product Price -->
                <div class="col-lg-3 col-sm-6 col-12">
                    <div class="form-group">
                        <label for="productprice"><span style="color: red;">*</span> Enter Product Price ⟨₹⟩</label>
                        <input type="number" inputmode="numeric" class="form-control" placeholder="Product Price ⟨₹⟩" id="productprice" oninput="CalculateMethod()" asp-for="@Model.Insert_Purchase_Stock.ProductPrice">

                        <span class="text-danger" style="color: red; font-size:11px; font-weight:bold;" asp-validation-for="@Model.Insert_Purchase_Stock.ProductPrice"></span>
                    </div>
                </div>

                <!-- Total Price -->
                <div class="col-lg-3 col-sm-6 col-12">
                    <div class="form-group">
                        <label for="totalprice"><span style="color: red;">*</span> Total Price ⟨₹⟩</label>
                        <input type="number" inputmode="numeric" class="form-control" placeholder="Total Price ⟨₹⟩" id="totalprice" asp-for="@Model.Insert_Purchase_Stock.TotalPrice">

                        <span class="text-danger" style="color: red; font-size:11px; font-weight:bold;" asp-validation-for="@Model.Insert_Purchase_Stock.TotalPrice"></span>
                    </div>
                </div>

                <!-- Vehicle Type -->
                <div class="col-lg-3 col-sm-6 col-12">
                    <div class="form-group">
                        <label for="selectvehicletype"><span style="color: red;">*</span> Select Vehicle</label>
                        <select class="select" id="selectvehicletype" aria-label="vehicletype" asp-for="@Model.Insert_Purchase_Stock.VehicleId" asp-items="@(ViewBag.Vehicle)">
                            <option selected disabled>-- Select Vehicle --</option>
                        </select>

                        <span class="text-danger" style="color: red; font-size:11px; font-weight:bold;" asp-validation-for="@Model.Insert_Purchase_Stock.VehicleId"></span>
                    </div>
                </div>
                

            

                <!-- Vehicle No. -->
                <div class="col-lg-3 col-sm-6 col-12">
                    <div class="form-group">
                        <label for="vehicleno"><span style="color: red;">*</span> Vehicle No.</label>
                        <input type="text" class="form-control" placeholder="GJ-01-MH-1234" id="vehicleno" asp-for="@Model.Insert_Purchase_Stock.VehicleNo" oninput="formatVehicleNo(this)">

                        <span class="text-danger" style="color: red; font-size:11px; font-weight:bold;" asp-validation-for="@Model.Insert_Purchase_Stock.VehicleNo"></span>
                    </div>
                    <span id="error-msg" style="color: red; font-size:11px; font-weight:bold;"></span>
                </div>

                <!-- Truck/Tempo Driver Name -->
                <div class="col-lg-3 col-sm-6 col-12">
                    <div class="form-group">
                        <label for="drivername"><span style="color: red;">*</span> Driver Name</label>
                        <input type="text" class="form-control" placeholder="Driver Name" asp-for="@Model.Insert_Purchase_Stock.DriverName" id="drivername" oninput="this.value = this.value.toUpperCase()">

                        <span class="text-danger" style="color: red; font-size:11px; font-weight:bold;" asp-validation-for="@Model.Insert_Purchase_Stock.DriverName"></span>
                    </div>
                </div>

                <!-- PAYMENT STATUS -->
                <div class="col-lg-3 col-sm-6 col-12">
                    <div class="form-group">
                        <label for="drivername"><span style="color: red;">*</span> Payment Status</label>
                        <input type="text" class="form-control" disabled placeholder="Driver Name" asp-for="@Model.Insert_Purchase_Stock.PaymentStatus" id="paymentsatus" oninput="this.value = this.value.toUpperCase()">

                        <span class="text-danger" style="color: red; font-size:11px; font-weight:bold;" asp-validation-for="@Model.Insert_Purchase_Stock.PaymentStatus"></span>
                    </div>
                </div>


                <div class="row justify-content-center">
                    <div class="col-auto text-center mb-3" style="margin-top:20px;">
                        <button type="submit" class="btn btn-success me-2">
                            <i class="fas fa-file"></i> Update Stock
                        </button>
                        <button type="submit" asp-action="Manage_Stocks" asp-controller="Stock" class="btn btn-info">
                            <i class="fas fa-arrow-left"></i> Back to Stocks
                        </button>
                    </div>
                </div>








            </form>

        </div>
    </div>
</div>

<!-- Load jQuery -->
<script src="https://ajax.googleapis.com/ajax/libs/jquery/3.7.1/jquery.min.js"></script>
<link rel="stylesheet" href="//code.jquery.com/ui/1.13.2/themes/base/jquery-ui.css">





<script>




    document.getElementById('selectgrain').addEventListener('change', function () {
        var selectedOption = this.options[this.selectedIndex];
        var selectedText = selectedOption.text;
        document.querySelector('input[name="ProductName"]').value = selectedText;


    });

    document.getElementById('selectvehicletype').addEventListener('change', function () {
        var selectedOption = this.options[this.selectedIndex];
        var selectedText = selectedOption.text; // This will be "ઘઉં" for the given example
        document.querySelector('input[name="VehicleName"]').value = selectedText;


    });





    function DateDefaultValue() {
        // Get current date in format YYYY-MM-DD
        var today = new Date();
        var dd = String(today.getDate()).padStart(2, '0');
        var mm = String(today.getMonth() + 1).padStart(2, '0'); // January is 0!
        var yyyy = today.getFullYear();
        today = yyyy + '-' + mm + '-' + dd;
        // Set default value for the date picker
        document.getElementById('datepicker').value = today;

    }


    window.onload = function () {
        DateDefaultValue();
        CalculateMethod();


    };



    function CalculateMethod() {
        var bags = document.getElementById('bags').value.trim();
        var bagsperkg = document.getElementById('bagsperkg').value.trim();
        var weightInput = document.getElementById('weight');
        var productprice = document.getElementById('productprice').value.trim();
        var totalprice = 0;

        // Check if both bags and bagsperkg are provided for multiplication
        var weight = (bags !== '' && bagsperkg !== '') ? bags * bagsperkg : parseFloat(weightInput.value) || 0;

        weightInput.value = weight === 0 ? '' : weight;

        var selectGrain = document.getElementById("selectgrain");
        var selectedValue = selectGrain.value;

        switch (selectedValue) {
            case "1":
            case "2":
            case "4":
            case "5":
            case "6":
            case "7":
            case "8":
                totalprice = weight * productprice / 20;
                break;

            case "3":
                totalprice = weight * productprice / 400;
                break;

            // Add more cases if needed
        }

        document.getElementById('totalprice').value = totalprice === 0 ? '' : totalprice;
    }

    // Attach the event listener to the dropdown
    document.getElementById("selectgrain").addEventListener("change", CalculateMethod);

    // Attach the event listener to the input field for bags
    document.getElementById("bags")?.addEventListener("input", function () {
        if (this.value.trim() !== '') {
            CalculateMethod();
        }
    });

    // Attach the event listener to the input field for bags per kg
    document.getElementById("bagsperkg")?.addEventListener("input", function () {
        if (this.value.trim() !== '') {
            CalculateMethod();
        }
    });

    // Attach the event listener to the input field for product price
    document.getElementById("productprice").addEventListener("input", CalculateMethod);


    function CheckData() {
        var date = document.getElementById("datepicker").value;
        var stockgrade = document.getElementById("stockgrade").value;
        var grainname = document.getElementById("selectgrain").value;
        var farmername = document.getElementById("farmer").value;
        var bags = document.getElementById("bags").value;
        var bagperkg = document.getElementById("bagsperkg").value;
        var weight = document.getElementById("weight").value;
        var productprice = document.getElementById("productprice").value;
        var totalprice = document.getElementById("totalprice").value;
        var vehicletype = document.getElementById("selectvehicletype").value;
        var vehicleno = document.getElementById("vehicleno").value;
        var drivername = document.getElementById("drivername").value;
        var tolatname = document.getElementById("tolatname").value;

        // Check if required fields are empty
        if (
            (grainname === '' || weight === '' || productprice === '' || totalprice === '' || vehicletype === '' || vehicleno === '' || drivername === '' || tolatname === '') &&
            (bags === '' || bagperkg === '' || stockgrade === '' || date === '')
        ) {
            alert("Please fill in all required data.");
            return false; // Prevent form submission
        } else {
            // If required fields are filled, show confirmation
            return confirm("Are you sure this data is correct? After submission, it can't be changed.");
        }
    }





    function formatVehicleNo(input) {
        // Remove non-alphanumeric characters and convert to uppercase
        let formattedInput = input.value.replace(/[^a-zA-Z0-9]/g, '').toUpperCase();

        // Ensure the input does not exceed the expected length
        formattedInput = formattedInput.substr(0, 14);

        // Insert hyphens at specific positions
        formattedInput = formattedInput.replace(/(\w{2})(\d{2})(\w{2})(\d{4})/, '$1-$2-$3-$4');

        // Update the input field with the formatted value
        input.value = formattedInput;

        // Validate the input format
        const regex = /^([A-Z]{2})-(\d{2})-([A-Z]{2})-(\d{4})$/;
        const errorMsg = document.getElementById('error-msg');
        errorMsg.textContent = regex.test(formattedInput) ? '' : 'Invalid format. Please follow the format: GJ-12-AB-1234';
    }



</script>


@*<script>
    $(document).ready(function () {
        var isSuggestionSelected = false; // Flag to check if a suggestion is selected

        $("#farmer").autocomplete({
            source: function (request, response) {
                $.ajax({
                    url: '@Url.Action("Get_Customer_Data", "Stock")',
                    type: "POST",
                    dataType: "json",
                    data: { CustomerName: request.term },
                    success: function (data) {
                        response($.map(data, function (item) {

                            console.log(data);

                            return { value: item.cT_Name + ' (' + item.cT_City + ')' + ' - ' + item.cT_Type, id: item.id };
                        }));
                    }
                });
            },
            minLength: 1,
            response: function (event, ui) {
                var enteredValue = $("#farmer").val().trim();

                // Check if suggestions are available and entered value is not part of suggestions
                if (ui.content.length === 0 && enteredValue !== "") {
                    // No suggestions and entered value not part of suggestions, show new customer message and input fields
                    $("#newCustomerMessage").show();
                    $("#newcustomertype").show();
                    $("#newcustomercity").show();
                    $("#newcustomerphoneno").show();
                } else {
                    // Suggestions available or entered value is part of suggestions, hide new customer message and input fields
                    $("#newCustomerMessage").hide();
                    $("#newcustomertype").hide();
                    $("#newcustomercity").hide();
                    $("#newcustomerphoneno").hide();
                }
            },
            select: function (event, ui) {
                // Check if the selected item is from the suggestion list
                isSuggestionSelected = ui.item && ui.item.id;

                // If a suggestion is selected, fill in the input field with only the name part
                if (isSuggestionSelected) {
                    var name = ui.item.value.split('(')[0].trim();
                    $("#farmer").val(name);
                }

                // If a new value is entered, handle it accordingly
                return false;
            }
        });

        // Hide the new customer message and additional inputs by default
        $("#newCustomerMessage").hide();
        $("#newcustomertype").hide();
        $("#newcustomercity").hide();
        $("#newcustomerphoneno").hide();

        // Reset visibility when the input is cleared or the page is refreshed
        $(window).on('beforeunload', function () {
            $("#newCustomerMessage").hide();
            $("#newcustomertype").hide();
            $("#newcustomercity").hide();
            $("#newcustomerphoneno").hide();
        });

        // Monitor input changes to handle backspace clearing
        $("#farmer").on('input', function () {
            var enteredValue = $(this).val().trim();

            // Check if the entered value is cleared
            if (enteredValue === "") {
                $("#newCustomerMessage").hide();
                $("#newcustomertype").hide();
                $("#newcustomercity").hide();
                $("#newcustomerphoneno").hide();
            }
        });
    });
</script>*@
@*<script>
    $(document).ready(function () {
        var isSuggestionSelected = false; // Flag to check if a suggestion is selected

        function toggleNewCustomerFields(show) {
            // Toggle visibility of new customer fields and message
            $("#newCustomerMessage").toggle(show);
            $("#newcustomertype").toggle(show);
            $("#newcustomercity").toggle(show);
            $("#newcustomerphoneno").toggle(show);
        }

        // Hide the new customer message and additional inputs by default
        toggleNewCustomerFields(false);

        $("#farmer").autocomplete({
            source: function (request, response) {
                $.ajax({
                    url: '@Url.Action("Get_Customer_Data", "Stock")', // Ensure the URL is correct for your routing setup
                    type: "POST",
                    dataType: "json",
                    data: { CustomerName: request.term },
                    success: function (data) {
                        console.log(data);


                        response($.map(data, function (item) {
                            // Assuming the response data structure matches your expectations
                            return {
                                label: item.customerName + ' (' + item.customerType + ')' + ' - ' + item.customerAddress,
                                value: item.customerName,
                                id: item.customerId
                            };
                        }));
                    }
                });
            },
            minLength: 1,
            response: function (event, ui) {
                // If no suggestions are found, show the new customer fields
                toggleNewCustomerFields(ui.content.length === 0);
            },
            select: function (event, ui) {
                isSuggestionSelected = !!ui.item.id;

                // Prevent default behavior to avoid placing the label in the input
                event.preventDefault();

                // Place only the customer name in the input field
                if (isSuggestionSelected) {
                    $("#farmer").val(ui.item.value);
                }

                // Hide new customer fields as a selection has been made
                toggleNewCustomerFields(false);
            }
        });

        // Reset visibility of fields when input is cleared or changed
        $("#farmer").on('input', function () {
            var enteredValue = $(this).val().trim();
            if (!enteredValue) {
                toggleNewCustomerFields(false);
                isSuggestionSelected = false; // Reset the flag as the input is cleared
            }
        });

        // Optionally, reset the form state when the page is refreshed or navigated
        $(window).on('beforeunload', function () {
            toggleNewCustomerFields(false);
        });
    });
</script>*@

@* <script>
    $(document).ready(function () {
        var isSuggestionSelected = false; // Flag to indicate if a suggestion has been selected.

        // Function to show or hide new customer fields and a message.
        function toggleNewCustomerFields(show) {
            $("#newCustomerMessage").toggle(show);
            $("#newcustomertype").toggle(show);
            $("#newcustomercity").toggle(show);
            $("#newcustomerphoneno").toggle(show);
        }

        // Initially hide the new customer message and fields.
        toggleNewCustomerFields(false);

        $("#farmer").autocomplete({
            source: function (request, response) {
                $.ajax({
                    url: '@Url.Action("Get_Customer_Data", "Stock")', // Make sure this URL is correct for your setup.
                    type: "POST",
                    dataType: "json",
                    data: { CustomerName: request.term },
                    success: function (data) {
                        response($.map(data, function (item) {
                            return {
                                label: item.customerName + ' (' + item.customerType + ') - ' + item.customerAddress,
                                value: item.customerName,
                                id: item.customerId // This will be used to set the hidden field value on selection.
                            };
                        }));
                    }
                });
            },
            minLength: 1, // Minimum length before searching.
            response: function (event, ui) {
                // Show the new customer fields if no suggestions are found.
                toggleNewCustomerFields(ui.content.length === 0);
            },
            select: function (event, ui) {
                // Set flag based on selection.
                isSuggestionSelected = true;

                // Prevent default to avoid placing label in the input.
                event.preventDefault();

                // Set the input to the customer name.
                $("#farmer").val(ui.item.value);

                // Update hidden field with selected customer ID.
                $("#CustomerId").val(ui.item.id);



                // Hide new customer fields as a selection has been made.
                toggleNewCustomerFields(false);
            }
        });

        // Reset the flag and potentially hide new customer fields if the input is cleared or changed.
        $("#farmer").on('input', function () {
            var enteredValue = $(this).val().trim();
            if (!enteredValue) {
                toggleNewCustomerFields(false);
                isSuggestionSelected = false;
            }
        });

        // Optionally, reset the form state when the page is refreshed or navigated away.
        $(window).on('beforeunload', function () {
            toggleNewCustomerFields(false);
        });
    });
</script> *@

<script>
    $(document).ready(function () {
        var isSuggestionSelected = false; // Flag to indicate if a suggestion has been selected.

        // Function to show or hide new customer fields and a message.
        function toggleNewCustomerFields(show) {
            $("#newCustomerMessage").toggle(show);
            $("#newcustomertype").toggle(show);
            $("#newcustomercity").toggle(show);
            $("#newcustomerphoneno").toggle(show);
        }

        // Initially hide the new customer message and fields.
        toggleNewCustomerFields(false);

        $("#farmer").autocomplete({
            source: function (request, response) {
                $.ajax({
                    url: '@Url.Action("Get_Customer_Data", "Stock")', // Make sure this URL is correct for your setup.
                    type: "POST",
                    dataType: "json",
                    data: { CustomerName: request.term },
                    success: function (data) {
                        response($.map(data, function (item) {
                            return {
                                label: item.customerName + ' (' + item.customerType + ') - ' + item.customerAddress,
                                value: item.customerName,
                                id: item.customerId // This will be used to set the hidden field value on selection.
                            };
                        }));
                    }
                });
            },
            minLength: 1, // Minimum length before searching.
            response: function (event, ui) {
                // Check if any of the suggestions exactly match the entered input.
                var exactMatch = ui.content.some(item => item.value.toLowerCase() === $("#farmer").val().toLowerCase());
                // Show the new customer fields if no exact matches are found.
                toggleNewCustomerFields(!exactMatch && !isSuggestionSelected);
            },
            select: function (event, ui) {
                // Set flag based on selection.
                isSuggestionSelected = true;

                // Prevent default to avoid placing label in the input.
                event.preventDefault();

                // Set the input to the customer name.
                $("#farmer").val(ui.item.value);

                // Update hidden field with selected customer ID.
                $("#CustomerId").val(ui.item.id);

                // Hide new customer fields as a selection has been made.
                toggleNewCustomerFields(false);
            }
        });

        // Reset the flag and potentially hide new customer fields if the input is cleared or changed.
        $("#farmer").on('input', function () {
            var enteredValue = $(this).val().trim();
            if (!enteredValue) {
                toggleNewCustomerFields(false);
                isSuggestionSelected = false;
            } else {
                isSuggestionSelected = false;
                // Since we are still typing, check if any item matches exactly from the last search.
                $("#farmer").autocomplete("search", enteredValue);
            }
        });

        // Optionally, reset the form state when the page is refreshed or navigated away.
        $(window).on('beforeunload', function () {
            toggleNewCustomerFields(false);
        });
    });
</script>






