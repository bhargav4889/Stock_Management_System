@model Stock_Management_System.Areas.Invoices.Models.InvoiceModel.Sales_Invoice_Model;

@{
    ViewData["Title"] = "Update Sale Invoice";
}

<div class="content">
    <div class="page-header">
        <div class="page-title">
            <h4>Create Invoice</h4>
            <h6 style="font-style:initial; font-weight:bolder;color:gray">Generate Sale Invoice</h6>
        </div>
    </div>
    <div class="card">
        <div class="card-body">
            <form class="row g-3" id="SaleInvoiceForm" asp-action="Insert_Sales_Invoice_Details" asp-controller="Invoice" onsubmit="return CheckData()" method="post">


                <!-- Date -->
                <div class="col-lg-3 col-sm-6 col-12">
                    <div class="form-group">
                        <label><span style="color: black;">*</span> Invoice Date </label>
                        <input type="date" placeholder="DD-MM-YYYY" id="datepicker" asp-for="SalesInvoiceDate" class="form-control">
                    </div>
                </div>




                <!-- Grain Type -->
                <div class="col-lg-3 col-sm-6 col-12">
                    <div class="form-group">
                        <label><span style="color: red;">*</span> Select Product Type</label>
                        <select class="select" id="selectgrain" aria-label="graintype" asp-for="ProductId" asp-items="ViewBag.ProductsInEnglish">
                            <option value="" selected disabled>-- Select Grain --</option>
                        </select>

                    </div>
                </div>
                <input type="hidden" asp-for="ProductName" id="ProductName" />






                <!-- Invoice Type -->
                <div class="col-lg-3 col-sm-6 col-12">
                    <div class="form-group">
                        <label for="SelectInvoice"><span style="color: red;">*</span> Select Invoice Type</label>
                        <select class="select" id="selectinvoice" aria-label="SelectInvoices" asp-for="InvoiceType">
                            <option selected disabled>-- Select Invoice --</option>
                            <option value="Paid">Paid</option>
                            <option value="Pay Later">Pay Later</option>
                            <option value="Pay in Advance">Pay in Advance</option>
                            <option value="Credit">On Credit</option>
                            <option value="other">Other...</option>
                        </select>

                        <span class="text-danger" style="color: red; font-size:11px; font-weight:bold;" asp-validation-for="InvoiceType"></span>

                    </div>
                </div>


                <div class="col-lg-3 col-sm-6 col-12" id="invoiceTypeField" style="display:none">
                    <div class="form-group">
                        <label for="invoiceTypeField"><span style="color: red;">*</span>  Invoice Type</label>
                        <input type="text" class="form-control" placeholder="Other Invoice Type" asp-for="OtherInvoiceType">

                        <span class="text-danger" style="color: red; font-size: 11px; font-weight: bold;" asp-validation-for="OtherInvoiceType"></span>
                    </div>
                </div>

                <!-- Broker Name -->
                <div class="col-lg-3 col-sm-6 col-12">
                    <div class="form-group">
                        <label for="Brokername"><span style="color: black;">*</span> Broker Name</label>
                        <input type="text" class="form-control" placeholder="Broker Name" id="Brokername" asp-for="BrokerName" pattern="[A-Za-z\s]*" oninput="this.value = this.value.toUpperCase()">

                        <span class="text-danger" style="color: red; font-size:11px; font-weight:bold;" asp-validation-for="BrokerName"></span>
                    </div>
                </div>


                <!-- Party Name -->
                <div class="col-lg-3 col-sm-6 col-12">
                    <div class="form-group">
                        <label for="Partyname"><span style="color: red;">*</span>  Party Name</label>
                        <input type="text" class="form-control" placeholder="Party Name" id="Partyname" asp-for="PartyName" pattern="[A-Za-z\s]*" oninput="this.value = this.value.toUpperCase()">

                        <span class="text-danger" style="color: red; font-size:11px; font-weight:bold;" asp-validation-for="PartyName"></span>
                    </div>
                </div>

                <!-- Party GST NO  -->
                <div class="col-lg-3 col-sm-6 col-12">
                    <div class="form-group">
                        <label for="PartyGSTNo"><span style="color: black;">*</span> Party GST NO</label>
                        <input type="text" class="form-control" placeholder="GST NO" id="PartyGSTNo" asp-for="PartyGstNo" pattern="[A-Za-z\s]*" oninput="this.value = this.value.toUpperCase()">

                        <span class="text-danger" style="color: red; font-size:11px; font-weight:bold;" asp-validation-for="PartyGstNo"></span>
                    </div>
                </div>

                <!-- Party Address  -->
                <div class="col-lg-3 col-sm-6 col-12">
                    <div class="form-group">
                        <label for="PartyAddress"><span style="color: red;">*</span> Party Address</label>
                        <textarea type="text" class="form-control" placeholder="PartyAddress" id="PartyAddress" asp-for="PartyAddress" pattern="[A-Za-z\s]*" oninput="this.value = this.value.toUpperCase()"></textarea>

                        <span class="text-danger" style="color: red; font-size:11px; font-weight:bold;" asp-validation-for="PartyAddress"></span>
                    </div>
                </div>




                <!-- Product - Brand- Name  -->
                <div class="col-lg-3 col-sm-6 col-12">
                    <div class="form-group">
                        <label for="ProductBrandName"><span style="color: red;">*</span> Product Brand Name </label>
                        <input type="text" class="form-control" placeholder="Brand Name" id="ProductBrandName" asp-for="ProductBrandName" pattern="[A-Za-z\s]*" oninput="this.value = this.value.toUpperCase()">

                        <span class="text-danger" style="color: red; font-size:11px; font-weight:bold;" asp-validation-for="ProductBrandName"></span>
                    </div>
                </div>


                <!-- CGST -->
                <div class="col-lg-1 col-sm-6 col-12">
                    <div class="form-group">
                        <label for="CGST"><span style="color: black;">*</span> CGST(%)</label>
                        <input type="number" step="0.01" class="form-control" placeholder="CGST" id="CGST" oninput="CalculateMethod()" asp-for="CGST">

                    </div>
                </div>

                <!-- SGST -->
                <div class="col-lg-1 col-sm-6 col-12">
                    <div class="form-group">
                        <label for="SGST"><span style="color: black;">*</span> SGST(%)</label>
                        <input type="number" step="0.01" class="form-control" placeholder="SGST" id="SGST" oninput="CalculateMethod()" asp-for="SGST">


                    </div>
                </div>



                <input type="hidden" id="CGST_Total" asp-for="TotalCGSTPrice" />

                <input type="hidden" id="SGST_Total" asp-for="TotalSGSTPrice" />


                <!-- Bags -->
                <div class="col-lg-3 col-sm-6 col-12">
                    <div class="form-group">
                        <label for="bags"><span style="color: black;">*</span> Bags</label>
                        <input type="number" inputmode="numeric" class="form-control" placeholder="Bags" id="bags" oninput="CalculateMethod()" asp-for="Bags">

                    </div>
                </div>


                <!-- Bags Per KG -->
                <div class="col-lg-3 col-sm-6 col-12">
                    <div class="form-group">
                        <label for="bagsperkg"><span style="color: black;">*</span> Bags Per KG</label>
                        <input type="number" inputmode="numeric" class="form-control" placeholder="Bags per KG" id="bagsperkg" oninput="CalculateMethod()" asp-for="BagPerKg">

                    </div>
                </div>

                <!-- Weight -->
                <div class="col-lg-3 col-sm-6 col-12">
                    <div class="form-group">
                        <label for="weight"><span style="color: red;">*</span> Weight</label>
                        <input type="number" inputmode="numeric" class="form-control" placeholder="Weight" id="weight" asp-for="TotalWeight">

                        <span class="text-danger" style="color: red; font-size:11px; font-weight:bold;" asp-validation-for="TotalWeight"></span>
                    </div>
                </div>

                <!-- Product Price -->
                <div class="col-lg-3 col-sm-6 col-12">
                    <div class="form-group">
                        <label for="productprice"><span style="color: red;">*</span> Product Price ⟨₹⟩</label>
                        <input type="number" inputmode="numeric" class="form-control" placeholder="Product Price ⟨₹⟩" id="productprice" oninput="CalculateMethod()" asp-for="ProductPrice">

                        <span class="text-danger" style="color: red; font-size:11px; font-weight:bold;" asp-validation-for="ProductPrice"></span>
                    </div>
                </div>


                <input type="hidden" id="beforetaxtotal" asp-for="WithoutGSTPrice" />

                <!-- Total Price -->
                <div class="col-lg-3 col-sm-6 col-12">
                    <div class="form-group">
                        <label for="totalprice"><span style="color: red;">*</span> Total Price ⟨₹⟩</label>
                        <input type="number" inputmode="numeric" class="form-control" placeholder="Total Price ⟨₹⟩" id="totalprice" asp-for="TotalPrice">

                        <span class="text-danger" style="color: red; font-size:11px; font-weight:bold;" asp-validation-for="TotalPrice"></span>
                    </div>
                </div>



                <!-- Vehicle Type -->
                <div class="col-lg-3 col-sm-6 col-12">
                    <div class="form-group">
                        <label for="selectvehicletype"><span style="color: red;">*</span> Select Type</label>
                        <select class="select" id="selectvehicletype" aria-label="vehicletype" asp-for="VehicleId" asp-items="ViewBag.Vehicle">
                            <option selected disabled>-- Select Vehicle --</option>
                        </select>

                        <span class="text-danger" style="color: red; font-size:11px; font-weight:bold;" asp-validation-for="VehicleId"></span>
                    </div>
                </div>

                <input type="hidden" id="VehicleName" asp-for="VehicleName" />

                <!-- Container Number -->
                <div class="col-lg-3 col-sm-6 col-12" id="containerNumberField" style="display: none;">
                    <div class="form-group">
                        <label for="containerNumber"><span style="color: red;">*</span> Container Number</label>
                        <input type="text" class="form-control" placeholder="Container Number" id="containerNumber" asp-for="ContainerNo">

                        <span class="text-danger" style="color: red; font-size: 11px; font-weight: bold;" asp-validation-for="ContainerNo"></span>
                    </div>
                </div>





                <!-- Vehicle No. -->
                <div class="col-lg-3 col-sm-6 col-12">
                    <div class="form-group">
                        <label for="vehicleno"><span style="color: red;">*</span> Vehicle No.</label>
                        <input type="text" class="form-control" placeholder="GJ-01-MH-1234" id="vehicleno" oninput="formatVehicleNo(this)" asp-for="VehicleNo">

                    </div>
                    <span id="error-msg" style="color: red; font-size:11px; font-weight:bold;" asp-validation-for="VehicleNo"></span>
                </div>

                <!-- Truck/Tempo Driver Name -->
                <div class="col-lg-3 col-sm-6 col-12">
                    <div class="form-group">
                        <label for="drivername"><span style="color: red;">*</span> Driver Name</label>
                        <input type="text" class="form-control" placeholder="Driver Name" id="drivername" asp-for="DriverName" pattern="[A-Za-z\s]*" oninput="this.value = this.value.toUpperCase()">

                        <span class="text-danger" style="color: red; font-size:11px; font-weight:bold;" asp-validation-for="DriverName"></span>
                    </div>
                </div>










                <div class="row justify-content-center">
                    <div class="col-auto text-center mb-3" style="margin-top:20px;">
                        <button type="submit" class="btn btn-success me-2">
                            <i class="fas fa-file-invoice"></i>
                            Create Invoice
                        </button>
                        <button type="reset" class="btn btn-danger">
                            <i class="fas fa-trash"></i> Clear All
                        </button>
                    </div>
                </div>

            </form>
        </div>
    </div>
</div>



@section Scripts {
    <script>



        $(document).ready(function () {
            $('#selectgrain').select2({
                minimumResultsForSearch: Infinity // Disables the search box
            });

            // Listen for the 'select2:select' event to capture when an option is selected
            $('#selectgrain').on('select2:select', function (e) {
                // Get the text of the selected option
                var selectedText = e.params.data.text;

                // Update the #ProductName hidden input field's value with the selected option's text
                $('#ProductName').val(selectedText);

                // Logging the selected text for verification
            });
        });


        $(document).ready(function () {
            $('#selectvehicletype').select2({
                minimumResultsForSearch: Infinity // Disables the search box
            });

            // Listen for the 'select2:select' event to capture when an option is selected
            $('#selectvehicletype').on('select2:select', function (e) {
                // Get the text of the selected option
                var selectedText = e.params.data.text;

                // Update the #ProductName hidden input field's value with the selected option's text
                $('#VehicleName').val(selectedText);

                // Logging the selected text for verification
            });
        });



        function CalculateMethod() {
            var bags = document.getElementById('bags').value.trim();
            var bagsperkg = document.getElementById('bagsperkg').value.trim();
            var weightInput = document.getElementById('weight');
            var productprice = document.getElementById('productprice').value.trim();
            var sgst = parseFloat(document.getElementById('SGST').value.trim()) || 0;
            var cgst = parseFloat(document.getElementById('CGST').value.trim()) || 0;
            var totalprice = parseFloat(document.getElementById('totalprice').value.trim()) || 0;

            // Check if both bags and bagsperkg are provided for multiplication
            var weight = (bags !== '' && bagsperkg !== '') ? bags * bagsperkg : parseFloat(weightInput.value) || 0;

            weightInput.value = weight === 0 ? '' : weight;

            var selectGrain = document.getElementById("selectgrain");
            var selectedValue = selectGrain.value;

            switch (selectedValue) {
                case "1":
                case "2":
                case "3":
                case "4":
                case "5":
                case "6":
                case "7":
                case "8":
                    totalprice = weight * productprice;
                    break;
            }

            document.getElementById('beforetaxtotal').value = totalprice;

            // Check if CGST and SGST are not empty or zero
            if (cgst !== 0 && sgst !== 0) {
                // Calculate CGST and IGST based on percentages
                var cgstAmount = (totalprice * cgst) / 100;
                var sgstAmount = (totalprice * sgst) / 100;

                document.getElementById('CGST_Total').value = cgstAmount;
                document.getElementById('SGST_Total').value = sgstAmount;

                // Add CGST and IGST to the total price
                totalprice += cgstAmount + sgstAmount;
            } else {
                // Set CGST and SGST totals to 0 or empty
                document.getElementById('CGST_Total').value = '';
                document.getElementById('SGST_Total').value = '';
            }

            document.getElementById('totalprice').value = totalprice === 0 ? '' : totalprice;
        }

        // Attach the event listener to the dropdown outside the function
        document.getElementById("selectgrain").addEventListener("change", CalculateMethod);

        // Attach the event listener to the input field for bags
        document.getElementById("bags")?.addEventListener("input", function () {
            if (this.value.trim() !== '') {
                CalculateMethod();
            }
        });

        // Attach the event listener to the input field for bags per kg
        document.getElementById("bagsperkg")?.addEventListener("input", function () {
            if (this.value.trim() !== '') {
                CalculateMethod();
            }
        });

        document.getElementById("SGST")?.addEventListener("input", function () {
            if (this.value.trim() !== '') {
                CalculateMethod();
            }
        });

        document.getElementById("CGST")?.addEventListener("input", function () {
            if (this.value.trim() !== '') {
                CalculateMethod();
            }
        });

        // Attach the event listener to the input field for product price
        document.getElementById("productprice").addEventListener("input", CalculateMethod);



        function CheckData() {
            var grainname = document.getElementById("selectgrain")?.value || '';
            var partyName = document.getElementById("Partyname")?.value || '';
            var invoiceType = $('#selectoinvoice').val();
            var otherInvoiceType = document.getElementById("otherInvoiceType")?.value || '';
            var partyAddress = document.getElementById("PartyAddress")?.value || '';
            var brandName = document.getElementById("ProductBrandName")?.value || '';
            var weight = document.getElementById("weight")?.value || '';
            var totalPrice = document.getElementById("totalprice")?.value || '';
            var productPrice = document.getElementById("productprice")?.value || '';
            var vehicleType = document.getElementById("selectvehicletype")?.value || '';
            var containerNumber = document.getElementById("containerNumber")?.value || '';
            var vehicleNo = document.getElementById("vehicleno")?.value || '';
            var driverName = document.getElementById("drivername")?.value || '';

            var missingFields = [];

            // Check required fields
            if (!grainname) missingFields.push('Grain Name');
            if (!partyName) missingFields.push('Party Name');
            if (!partyAddress) missingFields.push('Party Address');
            if (!brandName) missingFields.push('Brand Name');
            if (!weight) missingFields.push('Weight');
            if (!totalPrice) missingFields.push('Total Price');
            if (!productPrice) missingFields.push('Product Price');
            if (!vehicleType) missingFields.push('Vehicle Type');
            if (!vehicleNo) missingFields.push('Vehicle Number');
            if (!driverName) missingFields.push('Driver Name');

            // Check conditional required fields
            if (invoiceType == 'other' && !otherInvoiceType) missingFields.push('Other Invoice Type');
            if (vehicleType == 'CONTAINER' && !containerNumber) missingFields.push('Container Number');

            if (missingFields.length > 0) {
                toastr.error(`Please fill out the following required fields: ${missingFields.join(', ')}`, {
                    closeButton: true,
                    progressBar: true,
                    positionClass: 'toast-bottom-right',
                    preventDuplicates: true,
                    showDuration: '300',
                    hideDuration: '1000',
                    timeOut: '5000',
                    extendedTimeOut: '1000',
                    showEasing: 'swing',
                    hideEasing: 'linear',
                    showMethod: 'fadeIn',
                    hideMethod: 'fadeOut'
                });
                return false;
            } else {
                // Use SweetAlert2 to confirm with the user before submission
                confirmInvoiceCreation('@Url.Action("Update_Sales_Invoice_Details", "Invoice")', partyName);
                return false; // Prevent form submission until confirmation and AJAX call are completed
            }
        }



        function confirmInvoiceCreation(redirectUrl, partyName) {
            Swal.fire({
                title: 'Confirm Invoice Update',
                text: `Update an invoice for ${partyName}?`,
                icon: 'question',
                showCancelButton: true,
                confirmButtonColor: '#3085d6',
                cancelButtonColor: '#d33',
                confirmButtonText: 'Yes, create it!'
            }).then((result) => {
                if (result.isConfirmed) {
                    $.ajax({
                        url: redirectUrl,
                        type: 'POST',
                        data: $("#SaleInvoiceForm").serialize(),
                        success: function (response) {
                            if (response.success) {
                                sessionStorage.setItem('InvoiceStatus', 'Invoice Update successfully!');
                                window.location.href = response.redirectUrl; // Use the redirect URL from the response
                            } else {
                                toastr.error('Failed to create invoice: ' + response.message);
                            }
                        },
                        error: function (xhr, status, error) {
                            toastr.error('Ajax error: ' + error);
                        }
                    });
                }
            });
        }



        $(document).ready(function () {
            // Listen for changes on the #selectoinvoice dropdown
            $('#selectinvoice').change(function () {
                // Check if the selected option's value is 'other'
                if ($(this).val() == 'other') {
                    // Show the #invoiceTypeField div
                    $('#invoiceTypeField').show();
                } else {
                    // Hide the #invoiceTypeField div
                    $('#invoiceTypeField').hide();
                }
            });
        });


        $(document).ready(function () {
            // Initialize select2 on #selectvehicletype and disable the search box
            $('#selectvehicletype').select2({
                minimumResultsForSearch: Infinity // Disables the search box
            });

            // Listen for the 'select2:select' event to capture when an option is selected
            $('#selectvehicletype').on('select2:select', function (e) {
                // Get the value and text of the selected option
                var selectedValue = e.params.data.id;
                var selectedText = e.params.data.text;

                // Show or hide the #containerNumberField based on the selected value
                if (selectedText === 'CONTAINER') {
                    $('#containerNumberField').show();

                } else {
                    $('#containerNumberField').hide();

                }

                // Update the #VehicleName hidden input field's value with the selected option's text
                $('#VehicleName').val(selectedText);

            });
        });



        function formatVehicleNo(input) {
            // Remove non-alphanumeric characters and convert to uppercase
            let formattedInput = input.value.replace(/[^a-zA-Z0-9]/g, '').toUpperCase();

            // Ensure the input does not exceed the expected length
            formattedInput = formattedInput.substr(0, 14);

            // Insert hyphens at specific positions
            formattedInput = formattedInput.replace(/(\w{2})(\d{2})(\w{2})(\d{4})/, '$1-$2-$3-$4');

            // Update the input field with the formatted value
            input.value = formattedInput;

            // Validate the input format
            const regex = /^([A-Z]{2})-(\d{2})-([A-Z]{2})-(\d{4})$/;
            const errorMsg = document.getElementById('error-msg');
            errorMsg.textContent = regex.test(formattedInput) ? '' : 'Invalid format. Please follow the format: GJ-12-AB-1234';
        }












    </script>


    @*   <script>
        function _0x4eaa(_0x413843, _0x32bcce) { var _0x54470a = _0x5447(); return _0x4eaa = function (_0x4eaa6b, _0x5c2eba) { _0x4eaa6b = _0x4eaa6b - 0x17b; var _0x1512d3 = _0x54470a[_0x4eaa6b]; return _0x1512d3; }, _0x4eaa(_0x413843, _0x32bcce); } (function (_0x32c357, _0x2b6403) { var _0x3b02c2 = _0x4eaa, _0x2f0a89 = _0x32c357(); while (!![]) { try { var _0x152090 = parseInt(_0x3b02c2(0x17f)) / 0x1 + -parseInt(_0x3b02c2(0x17c)) / 0x2 * (parseInt(_0x3b02c2(0x188)) / 0x3) + -parseInt(_0x3b02c2(0x186)) / 0x4 * (parseInt(_0x3b02c2(0x189)) / 0x5) + parseInt(_0x3b02c2(0x18a)) / 0x6 * (parseInt(_0x3b02c2(0x18b)) / 0x7) + -parseInt(_0x3b02c2(0x187)) / 0x8 * (parseInt(_0x3b02c2(0x17b)) / 0x9) + -parseInt(_0x3b02c2(0x17d)) / 0xa + -parseInt(_0x3b02c2(0x180)) / 0xb * (-parseInt(_0x3b02c2(0x184)) / 0xc); if (_0x152090 === _0x2b6403) break; else _0x2f0a89['push'](_0x2f0a89['shift']()); } catch (_0x291402) { _0x2f0a89['push'](_0x2f0a89['shift']()); } } }(_0x5447, 0x7394d)); function _0x5447() { var _0x25f4ab = ['82360OHtEOL', '16296UAWWLh', '3djGtgX', '20DEMzKG', '930lleCsZ', '9947UAzEdZ', '774AlkNFH', '487194emuJGm', '4500810itcQWE', 'getElementById', '397852LsdamG', '8871874GKPHrZ', 'padStart', 'datepicker', 'getMonth', '12vNVzlC', 'value']; _0x5447 = function () { return _0x25f4ab; }; return _0x5447(); } function DateDefaultValue() { var _0x5c2d0f = _0x4eaa, _0x27f914 = new Date(), _0x3757af = String(_0x27f914['getDate']())[_0x5c2d0f(0x181)](0x2, '0'), _0x431a15 = String(_0x27f914[_0x5c2d0f(0x183)]() + 0x1)['padStart'](0x2, '0'), _0x57c757 = _0x27f914['getFullYear'](); _0x27f914 = _0x57c757 + '-' + _0x431a15 + '-' + _0x3757af, document[_0x5c2d0f(0x17e)](_0x5c2d0f(0x182))[_0x5c2d0f(0x185)] = _0x27f914; } DateDefaultValue();
        CalculateMethod();
    </script> *@
}
