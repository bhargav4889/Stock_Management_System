@using System.Data;
@using Stock_Management_System.UrlEncryption;

@{
    ViewData["Title"] = "Purchase Invoices";
}

@model IEnumerable<Stock_Management_System.Areas.Invoices.Models.InvoiceModel.Purchase_Invoice_Model>
@section Scripts
    {
    @{
        await Html.RenderPartialAsync("_ValidationScriptsPartial");
    }

 
    <script>
        $(document).ready(function () {
            var table = $('#data').DataTable();

            function parseDate(str) {
                var parts = str.split('-');
                return new Date(2000 + parseInt(parts[2], 10), parseInt(parts[1], 10) - 1, parseInt(parts[0], 10));
            }

            function applySearches() {
                var Name = $("#searchName").val();
                var VehicleName = $("#vehicletype").val();
                var selectedVehicle = $("#vehicletype option:selected").text();
                var TolatName = $("#searchTolatName").val();
                var selectedGrain = $("#graintype").val();
                var selectedGrainText = $("#graintype option:selected").text();
                var startdate = $('#startdate').val();
                var enddate = $('#datepickerend').val(); // Ensure this matches your HTML

                // Clear existing searches
                table.columns().search('');

                // Apply dropdown search if selected
                if (selectedGrain) {
                    table.column(2).search(selectedGrainText);
                }

                if (VehicleName) {
                    table.column(9).search(selectedVehicle);
                }

                // Apply individual column searches from input fields
                table.column(1).search(Name);
                table.column(8).search(TolatName);

                // Setup date filtering
                $.fn.dataTable.ext.search.push(function (settings, data, dataIndex) {
                    var dateColumn = data[0]; // Assuming the date is in the first column
                    var date = parseDate(dateColumn); // Parse the DD-MM-YY format

                    var start = startdate ? parseDate(startdate.split('-').reverse().join('-')) : null;
                    var end = enddate ? parseDate(enddate.split('-').reverse().join('-')) : new Date();

                    if (enddate && !startdate) {
                        start = new Date(end.getFullYear(), end.getMonth(), 1); // Set to the first of the month
                    }

                    if (startdate && !enddate) {
                        end = new Date(); // Set to current date
                    }

                    if (!startdate && !enddate) {
                        return true; // No filtering on dates
                    }

                    return (start ? date >= start : true) && (end ? date <= end : true);
                });

                // Perform a single draw after all search criteria have been applied
                table.draw();
                $.fn.dataTable.ext.search.pop(); // Remove the date filter after drawing

                // Reset the input values after search
                $("#searchName, #searchTolatName").val('');
                $('#graintype').val('').trigger('change');
                $('#vehicletype').val('').trigger('change');
            }

            $('#searchButton').on('click', function () {
                applySearches();
            });
        });

    </script>



    <script>
        function confirmPurchaseInvoiceDeletion(deleteUrl, customerName) {
            Swal.fire({
                title: 'Are You Sure You Want To Delete?',
                text: `${customerName}'s Invoice will be deleted.`,
                icon: 'warning',
                showCancelButton: true,
                confirmButtonColor: '#3085d6',
                cancelButtonColor: '#d33',
                confirmButtonText: 'Yes, delete it!'
            }).then((result) => {
                if (result.isConfirmed) {
                    $.ajax({
                        url: deleteUrl,
                        type: 'POST',
                        success: function (response) {
                            // Set a success message in session storage
                            sessionStorage.setItem('DeleteStatus', 'Invoice deleted successfully!');
                            // Redirect to a specified URL or reload
                            window.location.href = response.redirectUrl;
                        },
                        error: function () {
                            // Set an error message in session storage
                            sessionStorage.setItem('DeleteStatus', 'Error deleting invoice. Please try again.');
                            // Redirect or refresh page
                            window.location.reload();
                        }
                    });
                }
            });
        }

        $(document).ready(function () {
            var deleteMessage = sessionStorage.getItem('DeleteStatus');
            if (deleteMessage) {
                toastr.success(deleteMessage);
                // Clear the message from session storage so it doesn't reappear on refresh
                sessionStorage.removeItem('DeleteStatus');
            }
        });
    </script>



    <script>
        function showToastNotification(formId) {
            // Show a success toast notification
            toastr.success('Download started successfully.', 'Success', {
                closeButton: true,
                progressBar: true,
                positionClass: 'toast-top-center',
                timeOut: 3000, // Display duration
            });

            // Use setTimeout to delay form submission for a short period (e.g., 100 ms)
            setTimeout(function () {
                document.getElementById(formId).submit();
            }, 100); // Delay the form submission to allow the toast to render

            return false; // Prevent immediate form submission
        }
    </script>


}



<div class="content">
    <div class="page-header">
        <div class="page-title">
            <h4>Purchase Invoice List</h4>
            <h6>Manage Invoices Purchases </h6>
        </div>
        <div class="page-btn">
            <a role="button" asp-action="Add_Stock" asp-controller="Stock" class="btn btn-added"><img src="~/img/icons/plus.svg" alt="img" class="me-1">Create Invoice</a>
        </div>
    </div>
    @if (TempData["DeleteMessage"] != null)
    {
        <input type="hidden" id="toastrErrorMessage" value="@TempData["DeleteMessage"]" />
    }
    <div class="card">
        <div class="card-body">
            <div class="table-top">
                <div class="search-set">
                    <div class="search-path">
                        <a class="btn btn-filter" id="filter_search">
                            <img src="~/img/icons/filter.svg" alt="img">
                            <span><img src="~/img/icons/closes.svg" alt="img"></span>
                        </a>
                    </div>
                    <div class="search-input">
                        <a class="btn btn-searchset"><img src="~/img/icons/search-white.svg" alt="img"></a>
                    </div>
                </div>
                <div class="wordset">
                    <ul>
                        <li>
                            <form id="pdfExportForm" asp-action="Purchase_Invoice_Statement_PDF" asp-controller="Invoice" method="get">


                                <button type="submit" name="downloadType" value="PDF" class="btn" data-bs-toggle="tooltip" data-bs-placement="top" title="Download PDF" onclick="return showToastNotification('pdfExportForm')">
                                    <img src="~/img/icons/pdf.svg" alt="img">
                                </button>


                            </form>
                        </li>

                        <li>
                            <form id="excelExportForm" asp-action="Purchase_Invoice_Statement_EXCEL" asp-controller="Invoice" method="get">

                                <button type="submit" name="downloadType" value="EXCEL" class="btn" data-bs-toggle="tooltip" data-bs-placement="top" title="Download Excel" onclick="return showToastNotification('excelExportForm')">
                                    <img src="~/img/icons/excel.svg" alt="img">
                                </button>

                            </form>
                        </li>
                        <li>
                            <form>

                                <button type="button" onclick="window.print();" class="btn" data-bs-toggle="tooltip" data-bs-placement="top" title="Print">
                                    <img src="~/img/icons/printer.svg" alt="img">
                                </button>

                            </form>
                        </li>

                    </ul>
                </div>
            </div>

            <div class="card mb-0" id="filter_inputs">
                <div class="card-body pb-0">
                    <div class="row align-items-end">
                        <!-- Ensure alignment at the bottom -->
                        <!-- Start Date -->
                        <div class="col-sm-2">
                            <!-- Adjusted column size for tighter fit -->
                            <div class="form-group">
                                <label for="startdate"><span style="color: black;">*</span> Start Date</label>
                                <input type="date" class="form-control" id="startdate">
                            </div>
                        </div>

                        <!-- End Date -->
                        <div class="col-sm-2">
                            <!-- Adjusted column size for tighter fit -->
                            <div class="form-group">
                                <label for="datepickerend"><span style="color: black;">*</span> End Date</label>
                                <input type="date" class="form-control" id="datepickerend" name="enddate">
                            </div>
                        </div>

                        <!-- Select Product -->
                        <div class="col-sm-2">
                            <div class="form-group">
                                <label for="ProductType"><span style="color: black;">*</span> Select Product</label>
                                <select class="select form-control" id="graintype" asp-items="@(ViewBag.Products)">
                                    <option value="" selected disabled>-- Select Product --</option>
                                </select>
                            </div>
                        </div>

                        <!-- Select Vehicle -->
                        <div class="col-sm-2">
                            <div class="form-group">
                                <label for="VehicleType"><span style="color: black;">*</span> Select Vehicle</label>
                                <select class="select form-control" id="vehicletype" asp-items="@(ViewBag.Vehicle)">
                                    <option value="" selected disabled>-- Select Vehicle --</option>
                                </select>
                            </div>
                        </div>

                        <!-- Search By Name -->
                        <div class="col-sm-2">
                            <div class="form-group">
                                <label for="customername"><span style="color: black;">*</span> Search By Name</label>
                                <input type="text" class="form-control" placeholder="Enter Name.." oninput="this.value = this.value.toUpperCase()" id="searchName">
                            </div>
                        </div>



                        <!-- Search By Tolat -->
                        <div class="col-sm-2">
                            <div class="form-group">
                                <label for="TolatName"><span style="color: black;">*</span> Search By Tolat</label>
                                <input type="text" class="form-control" placeholder="Enter Name Of Tolat.." oninput="this.value = this.value.toUpperCase()" id="searchTolatName">
                            </div>
                        </div>

                        <!-- Search Button -->
                        <div class="col-sm-1">
                            <!-- Adjust the column size if necessary -->
                            <div class="form-group">
                                <a role="button" id="searchButton" class="btn btn-filters"><img src="~/img/icons/search-whites.svg" alt="search icon"></a>
                            </div>
                        </div>

                    </div>
                </div>
            </div>



        </div>

        <div class="table-responsive">
            <table id="data" class="table datanew">
                <thead>
                    <tr>

                        <th class="text-center">Date</th>
                        <th class="text-center">Name</th>
                        <th class="text-center">Product</th>
                        <th class="text-center">Bag</th>
                        <th class="text-center">Bag Per KG</th>
                        <th class="text-center">Weight</th>
                        <th class="text-center">Product-Price(₹)</th>
                        <th class="text-center">Total-Price(₹)</th>
                        <th class="text-center">Tolat</th>
                        <th class="text-center">Vehicle</th>
                        <th class="text-center">Actions</th>

                    </tr>
                </thead>
                <tbody>
                    @{
                        if (Model != null)
                        {
                            foreach (var item in Model)
                            {
                                <tr>

                                    <td class="text-center">
                                        @((DateTime.TryParse(item.PurchaseInvoiceDate.ToString(), out DateTime piDate) ? piDate : (DateTime?)null)?.ToString("dd-MM-yy"))
                                    </td>
                                    <td class="text-center">@item.CustomerName</td>
                                    <td class="text-center">@item.ProductName</td>
                                    <td class="text-center">@(item.Bags.HasValue ? item.Bags.Value.ToString() : "--")</td>
                                    <td class="text-center">@(item.BagPerKg.HasValue ? item.BagPerKg.Value.ToString() : "--")</td>
                                    <td class="text-center">@item.TotalWeight</td>
                                    <td class="text-center">@item.ProductPrice.ToString("C")</td>
                                    <td class="text-center">@item.TotalPrice.ToString("C")</td>
                                    <td class="text-center">@(string.IsNullOrEmpty(item.TolatName) ? "--" : @item.TolatName)</td>
                                    <td class="text-center">@item.VehicleName</td>



                                    <td class="text-center">
                                        <a class="action-set" href="/Options" data-bs-toggle="dropdown" aria-expanded="true">
                                            <i class="fa fa-ellipsis-v" aria-hidden="true"></i>
                                        </a>
                                        <ul class="dropdown-menu text-center">
                                            <li>
                                                <a role="link"
                                                   href="@Url.Action("Purchase_Invoice_Details", "Invoice", new { Invoice_ID = UrlEncryptor.Encrypt(Convert.ToString(item.PurchaseInvoiceId)) })"
                                                   onclick="event.preventDefault(); { window.location.href = this.href; }" class="dropdown-item"><img src="~/img/icons/eye1.svg" class="me-2" alt="img">Invoice Info</a>
                                            </li>
                                            <li>
                                                <a role="link"
                                                   href="@Url.Action("Update_Purchase_Invoice", "Invoice", new { Invoice_ID = UrlEncryptor.Encrypt(Convert.ToString(item.PurchaseInvoiceId)) })"
                                                   onclick="event.preventDefault(); { window.location.href = this.href; }" class="dropdown-item"><img src="~/img/icons/edit.svg" class="me-2" alt="img">Edit Invoice</a>
                                            </li>

                                            <li>
                                                <a role="button"
                                                   href="javascript:void(0);"
                                                   onclick="confirmPurchaseInvoiceDeletion('@Url.Action("Delete_Purchase_Invoice", "Invoice", new { Invoice_ID = UrlEncryptor.Encrypt(Convert.ToString(item.PurchaseInvoiceId)) })', '@item.CustomerName')"
                                                   class="dropdown-item confirm-text">
                                                    <img src="~/img/icons/delete1.svg" class="me-2" alt="img">Delete Invoice
                                                </a>
                                            </li>

                                        </ul>
                                    </td>

                                </tr>
                            }
                        }
                    }
                </tbody>
            </table>
        </div>

    </div>






